# @format

openapi: 3.0.1
info:
  title: Links.co API service
  description: Links.co API service
  version: 1.0.0
  license:
    name: Copyright Â© 2022 Links.co
  contact:
    name: Links.co
    url: Links.co
    email: info@links.co
servers:
  - url: /api/v1
    description: API URL
tags:
  - name: Authentication
    description: Auth endpoints
paths:
  /auth/register:
    post:
      summary: Save a new user information
      tags:
        - Auth
      requestBody:
        description: Requires the id of the user to be saved to db
        content:
          application/json:
            schema:
              $ref: "#/schemas/SaveUser"
        required: true
      responses:
        "201":
          description: User created
          content: {}
        "400":
          description: Bad request
          content: {}
        "403":
          description: User Exists
          content: {}
        "500":
          description: Server Error
          content: {}
  /auth/login:
    post:
      summary: Login user
      tags:
        - Auth
      requestBody:
        description: Requires email and password
        content:
          application/json:
            schema:
              $ref: "#/schemas/LoginUser"
        required: true
      responses:
        "200":
          description: Login succesful
          content: {}
        "400":
          description: Bad request
          content: {}
        "401":
          description: Login failed
          content: {}
        "500":
          description: Server Error
          content: {}
  #  /auth/logout:
  #    post:
  #      summary: Logout user
  #      tags:
  #        - Auth
  #      requestBody:
  #        description: Requires no parameters
  #        content:
  #          application/json:
  #            schema: {}
  #        required: false
  #      responses:
  #        '200':
  #          description: User logged out
  #          content: {}
  #        '400':
  #          description: Bad request
  #          content: {}
  #        '500':
  #          description: Server Error
  #          content: {}
  #  /auth/send-password-reset:
  #    post:
  #      summary: Login user
  #      tags:
  #        - Auth
  #      requestBody:
  #        description: Requires user's email
  #        content:
  #          application/json:
  #            schema:
  #              $ref: '#/schemas/PasswordReset'
  #        required: true
  #      responses:
  #        '200':
  #          description: password reset link sent
  #          content: {}
  #        '400':
  #          description: Bad request
  #          content: {}
  ##        '401':
  ##          description: Request failed
  ##          content: {}
  #        '404':
  #          description: User does not exist
  #          content: {}
  #        '500':
  #          description: Server Error
  #          content: {}
  /auth/user/{id}:
    get:
      summary: Get a user
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: The id of the user to retrieve
          required: true
          schema:
            type: string
        - name: token
          in: header
          description: Authentication token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User found
          content: {}
        "400":
          description: Bad request
          content: {}
        "404":
          description: User does not exist
          content: {}
        "500":
          description: Server Error
          content: {}

  # /auth/verify-email:
  #   put:
  #     summary: verify email with sso
  #     tags:
  #       - Auth
  #     requestBody:
  #       description: Requires sso
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/schemas/VerifyEmailWithSSO"
  #     responses:
  #       "201":
  #         description: email verified
  #         content: {}
  #       "400":
  #         description: Bad request
  #         content: {}
  #       "401":
  #         description: Authorisation failed
  #   content: {}
  # "403":
  #   description: Wrong SSO
  #   content: {}
  # "404":
  #   description: user does not exist
  #   content: {}
  # "500":
  #   description: Server Error
  #   content: {}
schemas:
  SaveUser:
    title: create new user
    required:
      - user information
    type: object
    properties:
      firstName:
        type: string
        example: john
      lastName:
        type: string
        example: doe
      email:
        type: string
        example: michaelngiri@gmail.com
      password:
        type: string
        example: secure-password
      phoneNumber:
        type: string
        example: "+12345697890"
  LoginUser:
    title: login a user
    required:
      - user information
    type: object
    properties:
      email:
        type: string
        example: michaelngiri@gmail.com
      password:
        type: string
        example: secure-password
  PasswordReset:
    title: Reset password
    required:
      - user email
    type: object
    properties:
      email:
        type: string
        example: michaelngiri@gmail.com
  CompletePasswordReset:
    title: Reset password
    required:
      - user email
      - otp
    type: object
    properties:
      email:
        type: string
        example: michaelngiri@gmail.com
      otp:
        type: string
        example: 123456
      newPassword:
        type: string
        example: password1
  VerifyEmailWithSSO:
    title: Reset password
    required:
      - user email
      - otp
    type: object
    properties:
      sso:
        type: string
        example: 123456-123456-123456
      email:
        type: string
        example: michaelngiri@gmail.com
  ResendSSO:
    title: Resend SSO
    required:
      - Single sign-on code(SSO)
    type: object
    properties:
      sso:
        type: string
        example: 123456-123456-123456

  ResendVerification:
    title: Reset password
    required:
      - user email and password
    type: object
    properties:
      email:
        type: string
        example: hello@links.co
      password:
        type: string
        example: secure-password
  DeleteUser:
    title: Delete user
    required:
      - user email and password
    type: object
    properties:
      email:
        type: string
        example: hello@links.co
      password:
        type: string
        example: secure-password
  VerifyToken:
    title: Verifiy token
    required:
      - token
    type: object
    properties:
      token:
        type: string
        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiam9obiBkb2UiLCJlbWFpbCI6ImhlbGxvQHNob290ZXIuYXBwIiwicGhvbmUiOiIrMTIzNDU2OTc4OTAiLCJpYXQiOjE1OTI2NTQwOTN9.n2gwgV_yRAy4LKpCct5LmH4i_r-Ok3t9VZOW198KKrI"
